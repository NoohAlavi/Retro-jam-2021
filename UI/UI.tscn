[gd_scene load_steps=8 format=2]

[ext_resource path="res://UI/UI.cs" type="Script" id=1]
[ext_resource path="res://UI/595FAD8C-E33F-4E12-A974-9B2D043A2BA3.png.eac9bd8cac80378692e4115553790af8.png" type="Texture" id=2]
[ext_resource path="res://UI/CRT.shader" type="Shader" id=3]
[ext_resource path="res://UI/BuyTurret.cs" type="Script" id=4]

[sub_resource type="Shader" id=1]
code = "/*
Godot 3 2D CRT Shader.
A 2D shader for Godot 3 simulating a CRT..
Author: hiulit
Repository: https://github.com/hiulit/Godot-3-2D-CRT-Shader
Issues: https://github.com/hiulit/Godot-3-2D-CRT-Shader/issues
License: MIT https://github.com/hiulit/Godot-3-2D-CRT-Shader/blob/master/LICENSE
*/

shader_type canvas_item;

const float PI = 3.14159265359;

uniform vec2 screen_size = vec2(320.0, 180.0);
uniform bool show_curvature = true;
uniform float curvature_x_amount : hint_range(3.0, 15.0, 0.01) = float(6.0); 
uniform float curvature_y_amount : hint_range(3.0, 15.0, 0.01) = float(4.0);
uniform vec4 corner_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform bool show_vignette = true;
uniform float vignette_opacity : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform bool show_horizontal_scan_lines = true;
uniform float horizontal_scan_lines_amount : hint_range(0.0, 180.0, 0.1) = 180.0;
uniform float horizontal_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform bool show_vertical_scan_lines = false;
uniform float vertical_scan_lines_amount : hint_range(0.0, 320.0, 0.1) = 320.0;
uniform float vertical_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float boost : hint_range(1.0, 2.0, 0.01) = 1.2;
uniform float aberration_amount : hint_range(0.0, 10.0, 0.01) = 0.0;

vec2 uv_curve(vec2 uv) {
	if (show_curvature) {
		uv = uv * 2.0 - 1.0;
		vec2 offset = abs(uv.yx) / vec2(curvature_x_amount, curvature_y_amount);
		uv = uv + uv * offset * offset;
		uv = uv * 0.5 + 0.5;
	}

	return uv;
}


void fragment() {
	vec2 uv = uv_curve(UV);
	vec2 screen_uv = uv_curve(SCREEN_UV);
	vec3 color = texture(SCREEN_TEXTURE, screen_uv).rgb;

	if (aberration_amount > 0.0) {
		float adjusted_amount = aberration_amount / screen_size.x;
		color.r = texture(SCREEN_TEXTURE, vec2(screen_uv.x + adjusted_amount, screen_uv.y)).r;
		color.g = texture(SCREEN_TEXTURE, screen_uv).g;
		color.b = texture(SCREEN_TEXTURE, vec2(screen_uv.x - adjusted_amount, screen_uv.y)).b;
	}

	if (show_vignette) {
		float vignette = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);
		vignette = clamp(pow((screen_size.x / 4.0) * vignette, vignette_opacity), 0.0, 1.0);
		color *= vignette;
	}

	if (show_horizontal_scan_lines) {
		float s = sin(screen_uv.y * horizontal_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, horizontal_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_vertical_scan_lines) {
		float s = sin(screen_uv.x * vertical_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, vertical_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_horizontal_scan_lines || show_vertical_scan_lines) {
		color *= boost;
	}

	// Fill the blank space of the corners, left by the curvature, with black.
	if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
		color = corner_color.rgb;
	}

	COLOR = vec4(color, 1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/screen_size = Vector2( 320, 180 )
shader_param/show_curvature = true
shader_param/curvature_x_amount = 6.0
shader_param/curvature_y_amount = 4.0
shader_param/corner_color = Color( 0, 0, 0, 1 )
shader_param/show_vignette = true
shader_param/vignette_opacity = 0.2
shader_param/show_horizontal_scan_lines = true
shader_param/horizontal_scan_lines_amount = 180.0
shader_param/horizontal_scan_lines_opacity = 1.0
shader_param/show_vertical_scan_lines = false
shader_param/vertical_scan_lines_amount = 320.0
shader_param/vertical_scan_lines_opacity = 1.0
shader_param/boost = 1.2
shader_param/aberration_amount = 0.0

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 3 )
shader_param/screen_size = Vector2( 320, 180 )
shader_param/show_curvature = true
shader_param/curvature_x_amount = 6.0
shader_param/curvature_y_amount = 4.0
shader_param/corner_color = Color( 0, 0, 0, 1 )
shader_param/show_vignette = true
shader_param/vignette_opacity = 0.2
shader_param/show_horizontal_scan_lines = true
shader_param/horizontal_scan_lines_amount = 180.0
shader_param/horizontal_scan_lines_opacity = 1.0
shader_param/show_vertical_scan_lines = false
shader_param/vertical_scan_lines_amount = 320.0
shader_param/vertical_scan_lines_opacity = 1.0
shader_param/boost = 1.2
shader_param/aberration_amount = 0.0

[node name="UI" type="Control"]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorRect" type="ColorRect" parent="."]
margin_top = 511.0
margin_right = 1024.0
margin_bottom = 599.0
color = Color( 0, 0.505882, 1, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CoinsLabel" type="Label" parent="."]
margin_left = 832.0
margin_top = 520.0
margin_right = 890.0
margin_bottom = 534.0
rect_scale = Vector2( 2, 2 )
custom_colors/font_color = Color( 1, 0.909804, 0, 1 )
text = "Coins: $x"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Buttons" type="CanvasLayer" parent="."]
layer = 4

[node name="HBoxContainer" type="HBoxContainer" parent="Buttons"]
margin_top = 513.0
margin_right = 512.0
margin_bottom = 553.0
rect_scale = Vector2( 2, 2 )
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button_1" type="Button" parent="Buttons/HBoxContainer"]
margin_left = 192.0
margin_right = 254.0
margin_bottom = 40.0
custom_colors/font_color_disabled = Color( 0.537255, 0.537255, 0.537255, 1 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_colors/font_color_hover = Color( 0.917647, 1, 0.341176, 1 )
custom_colors/font_color_pressed = Color( 1, 0.454902, 0.454902, 1 )
keep_pressed_outside = true
text = "Turret 1"
flat = true
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}
price = 5.0
turretName = "Test Turret"

[node name="Button_2" type="Button" parent="Buttons/HBoxContainer"]
margin_left = 258.0
margin_right = 320.0
margin_bottom = 40.0
text = "Turret 2"
flat = true
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}
price = 10.0
turretName = "Test Turret 2"

[node name="595FAD8C-E33F-4E12-A974-9B2D043A2BA3pngeac9bd8cac80378692e4115553790af8" type="Sprite" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.705882 )
position = Vector2( 512, 297.5 )
scale = Vector2( 0.266667, 0.279167 )
texture = ExtResource( 2 )

[node name="CRT" type="ColorRect" parent="."]
material = SubResource( 3 )
margin_right = 1024.0
margin_bottom = 600.0
__meta__ = {
"_edit_use_anchors_": false
}
